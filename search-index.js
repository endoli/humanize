var searchIndex = {};
searchIndex["humanize"] = {"doc":"# Humanize","items":[[0,"parse","humanize","Human-friendly Parsing",null,null],[3,"SourceLocation","humanize::parse","A location within a body of text.",null,null],[12,"start","","The starting offset into the text of the match.",0,null],[12,"end","","The ending offset into the text of the match.",0,null],[3,"Match","","A possible match for a value within some text.",null,null],[12,"value","","The value determined for this match.",1,null],[12,"weight","","Strength of the match.",1,null],[12,"location","","Location of the match within the text.",1,null],[3,"Matcher","","",null,null],[12,"name","","",2,null],[12,"language","","",2,null],[12,"result_type","","",2,null],[12,"matcher","","",2,null],[3,"Parser","","",null,null],[4,"ValueType","","",null,null],[13,"Boolean","","",3,null],[13,"Duration","","",3,null],[13,"Instant","","",3,null],[13,"Integer","","",3,null],[13,"Ordinal","","",3,null],[4,"HumanValue","","",null,null],[13,"Boolean","","",4,null],[13,"Duration","","",4,null],[13,"Instant","","",4,null],[13,"Integer","","",4,null],[13,"Ordinal","","",4,null],[0,"english","","English Humanization",null,null],[5,"register","humanize::parse::english","Register all of the English language matchers.",null,{"inputs":[{"name":"parser"}],"output":null}],[0,"boolean","","Booleans - English Humanization",null,null],[5,"register","humanize::parse::english::boolean","",null,{"inputs":[{"name":"parser"}],"output":null}],[11,"fmt","humanize::parse","",0,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",1,null],[11,"new","","Construct a new parser, including the default matchers.",5,{"inputs":[],"output":{"name":"self"}}],[11,"new_without_default_matchers","","Construct a new parser, but without any of the default matchers.",5,{"inputs":[],"output":{"name":"self"}}],[11,"register_matcher","","",5,null],[11,"parse","","Parse `text`, looking for a value of the [desired type],  using\nthe optionally provided language.",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"SourceLocation"],[3,"Match"],[3,"Matcher"],[4,"ValueType"],[4,"HumanValue"],[3,"Parser"]]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and\nother regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"fmt","","",0,null],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used\nas a normal language tag. None fields in the language range are ignored. If the language\ntag has more extlangs than the range these extlangs are ignored. Matches are\ncase-insensitive. `*` in language ranges are represented using `None` values. The language\nrange `*` that matches language tags is created by the default language tag:\n`let wildcard: LanguageTag = Default::default();.`",0,null],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,null],[11,"canonicalize","","Returns the canonical version of the language tag.",0,null],[11,"eq","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[14,"langtag!","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
initSearch(searchIndex);
